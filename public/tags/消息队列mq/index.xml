<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>消息队列MQ on Beautiful Hugo</title>
    <link>https://ahang7.github.io/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97mq/</link>
    <description>Recent content in 消息队列MQ on Beautiful Hugo</description>
    <generator>Hugo</generator>
    <language>en</language>
    <managingEditor>ch1447571882@qq.com (ch)</managingEditor>
    <webMaster>ch1447571882@qq.com (ch)</webMaster>
    <lastBuildDate>Sat, 28 Sep 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://ahang7.github.io/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97mq/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[MQ] 消息队列</title>
      <link>https://ahang7.github.io/post/basic/middlewares/mq%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97mq/</link>
      <pubDate>Sat, 28 Sep 2024 00:00:00 +0000</pubDate><author>ch1447571882@qq.com (ch)</author>
      <guid>https://ahang7.github.io/post/basic/middlewares/mq%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97mq/</guid>
      <description>&lt;p&gt;消息队列是大型分布式系统不可缺少的中间件，也是高并发系统的基石中间件&lt;/p&gt;&#xA;&lt;h2 id=&#34;一消息队列mq概述&#34;&gt;一、消息队列MQ概述&lt;/h2&gt;&#xA;&lt;p&gt;消息队列（Message Queue），指保存消息的一个容器，本质是个&lt;!-- raw HTML omitted --&gt;队列&lt;!-- raw HTML omitted --&gt;，传送的消息可以是文本字符串，也可以是复杂的嵌入对象&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;基本模型&lt;/em&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;应用场景&#34;&gt;应用场景&lt;/h3&gt;&#xA;&lt;h4 id=&#34;1异步处理&#34;&gt;1.异步处理&lt;/h4&gt;&#xA;&lt;p&gt;消息队列的主要特点是异步处理，主要目的是减少请求响应的时间，实现非核心流程异步化，提高系统响应性能&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;了解同步与异步&lt;a href=&#34;https://blog.csdn.net/hong521520/article/details/106671930&#34;&gt;同步与异步的区别(一看则懂)_同步和异步的区别-CSDN博客&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;异步的经典场景就是将比较耗时而且不需要即时（同步）返回结果的操作，通过&lt;strong&gt;&lt;strong&gt;消息队列&lt;/strong&gt;&lt;/strong&gt;来实现****异步化&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;2应用解耦&#34;&gt;2.应用解耦&lt;/h4&gt;&#xA;&lt;p&gt;解耦：保证消息格式不变，消息的发送方和接收方之间并不需要彼此联系，也不受对方的影响&lt;/p&gt;&#xA;&lt;p&gt;只通过消息队列MQ来联系（？）&lt;/p&gt;&#xA;&lt;h4 id=&#34;3流量削锋&#34;&gt;3.流量削锋&lt;/h4&gt;&#xA;&lt;p&gt;一般在秒杀或团抢活动中使用广泛&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;这种场景中系统的&lt;strong&gt;&lt;strong&gt;峰值流量&lt;/strong&gt;&lt;/strong&gt;往往集中于一小段时间内，所以为了防止系统在短时间内的峰值流量冲垮，往往采用&lt;strong&gt;&lt;strong&gt;消息队列&lt;/strong&gt;&lt;/strong&gt;来削弱峰值流量，相当于消息队列做了一次缓冲&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;4日志处理&#34;&gt;4.日志处理&lt;/h4&gt;&#xA;&lt;p&gt;日志处理是指将消息队列用在日志处理中，以解决大量日志传输的问题（比如Kafka）&lt;/p&gt;&#xA;&lt;p&gt;暂时无法在飞书文档外展示此内容&lt;/p&gt;&#xA;&lt;h2 id=&#34;二消息队列mq设计&#34;&gt;二、消息队列MQ设计&lt;/h2&gt;&#xA;&lt;h3 id=&#34;1整体框架&#34;&gt;1.整体框架&lt;/h3&gt;&#xA;&lt;p&gt;暂时无法在飞书文档外展示此内容&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Producer 消息生产者：负责产生和发生消息到Broker；&lt;/li&gt;&#xA;&lt;li&gt;Broker 消息处理中心：负责消息存储、确认、重试等，一般会有多个queue；&lt;/li&gt;&#xA;&lt;li&gt;Consumer 消息消费者：负责从Broker中获取消息，并进行相应处理；&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;2详细设计&#34;&gt;2.详细设计&lt;/h3&gt;&#xA;&lt;p&gt;Producer生产者 产生消息 &amp;ndash;&amp;gt; Broker消息处理中心 存储消息 &amp;ndash;&amp;gt; Consumer 消费者对消费消息，返回 消息确认 &amp;ndash;&amp;gt; Broker 进行消息备份/删除&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;RPC通信&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Producer产生消息，Consumer消费消息都会涉及到通信的问题，消息队列使用了RPC将数据流串起来&lt;/p&gt;&#xA;&lt;ol start=&#34;2&#34;&gt;&#xA;&lt;li&gt;Broker存储&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;消息到达服务端后需要存储到Broker&lt;/p&gt;&#xA;&lt;p&gt;流量削峰、最终一致性等需求都是需要Broker先存储下来，等待合适的时机投递&lt;/p&gt;&#xA;&lt;p&gt;存储可以有很多方式，存储在内存，分布式KV，磁盘，数据库等，存储的选项需要考虑&lt;strong&gt;综合性能/高可用和开发维护成本&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ol start=&#34;3&#34;&gt;&#xA;&lt;li&gt;消费模型&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;消息到达Broker后，最终需要Consumer去消费消息，这里涉及到消费模型&lt;/p&gt;&#xA;&lt;p&gt;目前主要有两种：单播和广播&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;单播：点到点&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;广播：一点对多点&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;ol start=&#34;4&#34;&gt;&#xA;&lt;li&gt;高级特性&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Consumer端把消息消费了，除了需要消息确认，还会涉及到比如：重复消息、顺序消息、消息延迟、事务消息等需要考虑的高级特性&lt;/p&gt;&#xA;&lt;h3 id=&#34;消息队列mq模型&#34;&gt;消息队列MQ模型&lt;/h3&gt;&#xA;&lt;p&gt;主要有两种模型：&lt;strong&gt;点对点&lt;/strong&gt; 与 &lt;strong&gt;发布订阅&lt;/strong&gt; 两种模型&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/cn/message-queue/&#34;&gt;消息队列是什么_mq是什么_MQ消息队列服务-AWS云服务&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/431149128&#34;&gt;深入消息队列MQ，看这篇就够了！&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
  </channel>
</rss>
